on: [push, pull_request]

name: build

jobs:
  lint:
    name: Format and Clippy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1.0.3
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1.0.3
        with:
          command: clippy
          args: --all-features -- -D warnings

  build:
    name: Build
    strategy:
      matrix:
        toolchain: [stable, nightly]
        os: [ubuntu-latest, macos-latest]
        arch: [aarch64, x86_64]
        exclude:
        - os: macos-latest
          arch: aarch64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Generate Target Triple
        id: generate-target
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo '::set-output name=triple::${{ matrix.arch }}-apple-darwin'
          else
            echo '::set-output name=triple::${{ matrix.arch }}-unknown-linux-gnu'
          fi

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          target: ${{ steps.generate-target.outputs.triple }}
          override: true

      - name: Run cargo build
        if: ${{ matrix.arch == 'aarch64' }}
        # don't compile tls with tls support
        run: |
          cargo install cross
          cross build --target ${{ steps.generate-target.outputs.triple }} --features default,flamegraph,protobuf,cpp,pyroscope,rustls-tls
      
      - name: Run cargo build
        uses: actions-rs/cargo@v1.0.3
        if: ${{ matrix.arch == 'x86_64' }}
        with:
          command: build
          args: --target ${{ steps.generate-target.outputs.triple }} --features default,flamegraph,protobuf,cpp,pyroscope,default-tls

  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        toolchain: [stable, nightly]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Install Dependency on Mac OS
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install openssl
      
      - name: Install Dependency on Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1.0.3
        with:
          command: test
          args: --all-features
